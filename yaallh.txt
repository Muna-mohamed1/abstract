package Mama;

public  abstract class Vehicle {

    protected double cif;
    protected int seatingCapacity;
    protected double grossWeight;
    protected int engineCapacity;
    protected int yearOfproduction;
    protected String TypePlatenumber ;
    protected double ageoftheCar;
    protected double TotalTax;
    protected String transportMode;
    protected int bondParkingFees;

public Vehicle( double cif,int seatingCapacity, double grossWeight,int engineCapacity,int yearOfproduction,
                String TypePlatenumber , double ageoftheCar, double TotalTax,String transportMode,int bondParkingFees)
{
    this.cif = cif;
    this.seatingCapacity = seatingCapacity;
    this.grossWeight = grossWeight;
    this.yearOfproduction =yearOfproduction;
    this.TypePlatenumber = TypePlatenumber;
    this.engineCapacity = engineCapacity;
    this.ageoftheCar = yearOfproduction;
    this.TotalTax = 0.0;
    this.transportMode = transportMode;
    this.bondParkingFees = bondParkingFees;
}
abstract void calculateTotalTaxRates();



    abstract void calculateTransportModeFee();



  abstract void printTotalTax();


    abstract void calculateBondParkingFees();


    public abstract void calculateTax();


}
package Mama;

class Ambulance extends Vehicle {

    public Ambulance(double cif, int seatingCapacity, double grossWeight, int engineCapacity, int yearOfproduction,
                     String TypePlatenumber, double ageofTheCar, double TotalTax, String transportMode, int bondParkingFees) {
        super(cif, seatingCapacity, grossWeight, engineCapacity, yearOfproduction, TypePlatenumber, ageofTheCar,
                TotalTax, transportMode, bondParkingFees);
    }

    @Override
    void printTotalTax() {
        System.out.println("tax ");
    }

    @Override
    public void calculateTax() {
        TotalTax +=35000;
        TotalTax +=20000;
        TotalTax +=200000;

        if (ageoftheCar > 10) {
            TotalTax += 0.15*cif;
        } else {
            TotalTax += 150000;
        }

    }
    @Override
    void calculateTotalTaxRates() {

    }

    @Override
    void calculateTransportModeFee() {

    }

    @Override
    void calculateBondParkingFees() {

    }
}





package Mama;

class Estate extends Vehicle {

    public Estate(double cif, int seatingCapacity, double grossWeight, int engineCapacity, int yearOfproduction,
                  String TypePlatenumber, double ageofTheCar, double TotalTax, String transportMode, int bondParkingFees) {
        super(cif, seatingCapacity, grossWeight, engineCapacity, yearOfproduction, TypePlatenumber, ageofTheCar,
                TotalTax, transportMode, bondParkingFees);
    }



    @Override
    void printTotalTax() {

            System.out.println("The Total Tax payable is :" + TotalTax + "UGX");


        }


    @Override
    void calculateTotalTaxRates() {






    TotalTax += 0.25 * cif;
                TotalTax += 0.18 * cif;
                TotalTax += 0.06 * cif;
                TotalTax += 150000;
                TotalTax += 35000;
                TotalTax += 20000;
                TotalTax += 200000;
                if (seatingCapacity > 5) {
                    TotalTax += 250000;

                }
        if (seatingCapacity > 5) {
            int extraSeatingCapacity = seatingCapacity - 5;
            TotalTax += extraSeatingCapacity*250000;
        }
                if (grossWeight >= 1500 && grossWeight <= 2000) {
                    TotalTax += 0.15 * cif;
                } else if (grossWeight > 2000) {
                    TotalTax += 0.1 * cif;
                } else {
                    TotalTax += 0.02 * cif;
                }
                if (engineCapacity > 1800) {
                    TotalTax += 0.05 * cif;
                } else {
                    TotalTax += 0.025 * cif;
                }

                if (ageoftheCar >= 1 && ageoftheCar <= 5) {
                    TotalTax += 0.01 * cif;
                } else if (ageoftheCar >= 5 && ageoftheCar <= 10) {
                    TotalTax += 0.05 * cif;
                } else {
                    TotalTax += 0.15 * cif;
                }
            }
    void calculateTransportModeFee() {

    }

    @Override
    void calculateBondParkingFees() {

    }

    @Override
    public void calculateTax() {

    }


        }

package Mama;

public class Sedan extends Vehicle {

    public Sedan(double cif, int seatingCapacity, double grossWeight, int engineCapacity, int yearOfproduction,
                 String TypePlatenumber, double ageofTheCar, double TotalTax, String transportMode, int bondParkingFees) {
        super(cif, seatingCapacity, grossWeight, engineCapacity, yearOfproduction, TypePlatenumber, ageofTheCar,
                TotalTax, transportMode, bondParkingFees);
    }



    @Override
   public void calculateTotalTaxRates() {

    }

    @Override
    public void calculateTax() {
        TotalTax += 0.25 * cif;
        TotalTax += 0.18 * cif;
        TotalTax += 0.06 * cif;
        TotalTax += 150000;
        TotalTax += 35000;
        TotalTax += 20000;
        TotalTax += 200000;

        if (TypePlatenumber.equals("APS")) {
            TotalTax += 3000000;
        } else if (TypePlatenumber.equals("DPS")) {
            TotalTax += 7000000;
        }
    }

    public void calculateTransportModeFee() {
        if (transportMode.equals("Carrier")) {
            TotalTax += 0.005 * cif;
        } else if (transportMode.equals("Driven")) {
            TotalTax += 0.015 * cif;


            if (grossWeight >= 1500 && grossWeight <= 2000) {
                TotalTax += 0.10 * cif;
            } else if (grossWeight >= 2000) {
                TotalTax += 0.15 * cif;
            } else if (grossWeight <= 2000) {
                TotalTax += 0.02 * cif;
            }


            if (engineCapacity > 2000) {
                TotalTax += 0.1 * cif;
            } else if (engineCapacity <= 2000 && engineCapacity <= 1500) {
                TotalTax += 0.05 * cif;
            } else {
                TotalTax += 0.025 * cif;
            }
            if (ageoftheCar >= 15) {
                System.out.println("can not be imported in to the country ");
            } else if (ageoftheCar >= 10 && ageoftheCar <= 15) {
                TotalTax += 0.1 * cif;
            } else if (ageoftheCar >= 10 && ageoftheCar <= 5) {
                TotalTax += 0.05 * cif;
            } else {
                TotalTax += 0.015 * cif;
            }
        }
    }

    @Override
    void printTotalTax() {
            TotalTax=+250;
    }

    @Override
    void calculateBondParkingFees() {

    }

}

package Mama;

class Trailer extends Vehicle {
    public Trailer(double cif, int seatingCapacity, double grossWeight, int engineCapacity, int yearOfproduction,
                   String TypePlatenumber, double ageofTheCar, double TotalTax, String transportMode, int bondParkingFees) {
        super(cif, seatingCapacity, grossWeight, engineCapacity, yearOfproduction,
                TypePlatenumber, ageofTheCar, TotalTax, transportMode, bondParkingFees);

    }

    @Override
    public void calculateTax() {


        TotalTax += 0.25 * cif;
        TotalTax += 0.18 * cif;
        TotalTax += 0.06 * cif;
        TotalTax += 150000;
        TotalTax += 35000;
        TotalTax += 20000;
        TotalTax += 200000;

        if (seatingCapacity > 5) {
            int extraSeatingCapacity = seatingCapacity - 5;
            TotalTax += extraSeatingCapacity*250000;
        }

        if (grossWeight >=1500 && grossWeight<=2000) {
            TotalTax += 0.15*cif;
        }
        else  if (grossWeight>2000)
        {
           TotalTax+=0.25*cif;
        }
        else if (grossWeight <=15000)
        {
            TotalTax+=0.05*cif;
        }

        if (engineCapacity > 20000) {
            TotalTax = 0.10*cif;
        } else if (engineCapacity >=15000 && engineCapacity <= 20000) {
            TotalTax = 0.05*cif;
        } else {
            TotalTax = 0.025*cif;
        }

        if (ageoftheCar > 15 )
        {
            System.out.println("cannot imported in this counytry");
        }

        if (ageoftheCar >= 10 && ageoftheCar <= 15) {
            TotalTax = 0.10*cif;
        } else if (ageoftheCar >= 5 && ageoftheCar <= 10) {
            TotalTax = 0.05*cif;
        } else {
            TotalTax = 0.015*cif;
        }
    }
    @Override
    void calculateTotalTaxRates() {

    }

    @Override
    void calculateTransportModeFee() {

    }

    @Override
    void printTotalTax() {

    }

    @Override
    void calculateBondParkingFees() {

    }

}
package Mama;

public class AnyVehicle extends Vehicle {


    public AnyVehicle(double cif, int seatingCapacity, double grossWeight, int engineCapacity, int yearOfProduction, String plateTypeNumber, double ageOfTheCar, double TotalTax, String transportMode, int bondParkingFees) {
        super(cif, seatingCapacity, grossWeight, engineCapacity, yearOfProduction, plateTypeNumber, ageOfTheCar, TotalTax, transportMode, bondParkingFees);
    }

    @Override
    void calculateTotalTaxRates() {
        System.out.println("calculate text rates");
    }

    @Override
    void calculateTransportModeFee() {

    }

    @Override
    void printTotalTax() {

    }

    @Override
    void calculateBondParkingFees() {

    }



    @Override
    public void calculateTax() {


        if (transportMode == "carrier") {
            TotalTax = 0.005 * cif;
        } else if (transportMode == "driven") {
            TotalTax = 0.015 * cif;
        } else {
            TotalTax = 0;
        }



        if (TypePlatenumber =="APS"){
            return ;
        } else if (TypePlatenumber == "DPS") {
            return;
        }
        else {
            TotalTax = 0;
        }

        if (bondParkingFees==24);{
            TotalTax=15000;
        }
    }
}
package Mama;

public class MAINS {

    public static void main(String[] args) {



        Sedan sedan = new Sedan(200.50,20,2500,1700,2008,"DPS",30, 10000.36,"Carrier",25000);
        sedan.calculateTax();
        sedan.calculateTax();
        sedan.calculateBondParkingFees();
        sedan.calculateBondParkingFees();

        Ambulance ambulance = new Ambulance(25000.50,10,1500.25,2500,2000,"APS",15,5000000,"Driven",30000);
        ambulance.calculateTax();

        ambulance.calculateBondParkingFees();
        ambulance.calculateBondParkingFees();
        ambulance.calculateTransportModeFee();



        Estate estate = new Estate(15000.50,100,1500,400,2010,"DPS",2010,5000000,"Carrier",2300);
        estate.calculateTax();

        estate.calculateTransportModeFee();
        estate.calculateBondParkingFees();
        estate.calculateBondParkingFees();

        SUV suv = new SUV(10000.50,50,5000,2000,2018,"APS",10,15000,"Carrier",10000);
        suv.calculateTax();

        suv.calculateTransportModeFee();
        suv.calculateBondParkingFees();
        suv.calculateBondParkingFees();

        Trailer trailer = new Trailer(1500.50,25,1600,1700,2020,"DPS",2018,10000,"APS",5000);
        trailer.calculateTax();

        trailer.calculateTransportModeFee();
        trailer.calculateBondParkingFees();
        trailer.calculateBondParkingFees();
        AnyVehicle anyVehicle = new AnyVehicle(1000.50,10,4000,25000,2012,"DPS",10,100000,"Carrier",15000);
        anyVehicle.calculateTax();
        anyVehicle.calculateBondParkingFees();
        anyVehicle.calculateTransportModeFee();
        anyVehicle.calculateTax();




    }
}






